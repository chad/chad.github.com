---
layout: post
title: !binary |-
  Q29kZSBLYXRhOiBWaXN1YWxpemF0aW9uCg==
enki_id: 4468
---
For centuries, Buddhists have practiced a meditation technique called
Visualization. The practice involves reconstructing every minute detail of
a complex Thangka painting (e.g. <a
href="http://www.tibetshop.com/gs363.html">www.tibetshop.com/gs363.html</a>)
from memory in one&#8217;s mind. The ultimate aim is to be able to hold an
entire complex image in your mind at once, as if actually looking at the
painting.

<p>
As with many (if not all) of the Buddhist meditative practices, the goal of
this meditation is to practice focusing and controlling the mind.
Scientific studies have shown that Buddhist meditative practices such as
visualization have a signficant physical effect on where and how activity
occurs in the brain. Additionally, it has been proven that intense practice
in various disciplines signficantly increases the physical development of
the brain in areas associated with positive thought.(1) Mental practice and
development is analogous to physical exercise, with your mental
&quot;muscles&quot; getting materially stronger with practice.
</p>
<h2>What to do</h2>
<p>
(If you are new to the term &quot;Code Kata&quot;, visit Dave&#8217;s site:
<a
href="http://www.pragprog.com/pragdave/Practices/Kata">www.pragprog.com/pragdave/Practices/Kata</a>.
This Kata will require more than one sitting. Start small and increase in
complexity over time. Continue with a single piece of code until
you&#8217;ve mastered it or until you see no value in continuing.)
</p>
<p>
Pick a piece of code that you consider to be of extremely high quality.
Ideally, this should be sized somewhere between the huge (the Linux kernel
source) and the tiny (&quot;Cookbook&quot; snippets). For maximum
utilitarian benefit, find a piece of software that you would like to
enhance your understanding of. Open source programmers might choose, for
example, the standard library of their programming language of choice.
</p>
<p>
Find a quiet place where you won&#8217;t be disturbed. Start with a
moderately small piece of your chosen code base and study it intensely for
20 to 30 minutes. You can start out with as small a chunk as you like.
After your period of study, sit back, close your eyes (if you like), relax,
and try to reconstruct the code in your mind. You might start with classes
(in an object oriented program), fill the classes out with methods and
instance variables, and eventually fill out the method bodies. Follow the
logical flow from one method to the next. Enumerate the classes, variables,
and methods in your mind.
</p>
<p>
Alternatively, you could spend sessions trying to reconstruct a graphical
representation of the code&#8212;perhaps UML. Class diagrams and sequence
diagrams would probably be a good start, though converting source to UML in
your head might prove to be harder than remembering the code itself. A mix
of code and visual representation might be a good place to end up. Feel
free to experiment and season to taste.
</p>
<p>
Set a time limit for the exercise. 10-15 minutes would probably be a good
start. Adjust as your experience dictates. Try not to let your mind wander
during the time that you have allotted. As other thoughts enter your mind
(e.g. &quot;Why am I doing this? This is silly. What should I have for
dinner?&quot;) push them gently away and focus on the code. (As the
Buddhist medidators would probably add, we all get distracted. Don&#8217;t
be distracted by the fact that you&#8217;re getting distracted. Don&#8217;t
punish yourself. Just go back to the code.)
</p>
<p>
Slowly add more and more of the full code base as you practice in
subsequent days and weeks. Add code one &quot;module&quot; at a time, until
you eventually (if ever) are able to hold your entire chosen code base in
your mind.
</p>
<h2>Goals</h2>
<p>
There are two primary goals to this exercise, one with immediate visible
benefit&#8212;the other with a potentially longer term effect:
</p>
<h3>Immediate/Visible</h3>
<p>
Great conductors commit entire symphonies to memory. That might be 30
minutes worth of black dots written for potentially 100+ simultaneous
(instrumental) voices. I&#8217;ve heard some say that it greatly enhances
their ability to <b>hear</b> the piece. If these pieces happen to be the
work of a &quot;master&quot;, what better way is there to stamp a piece of
that master&#8217;s work on your mind?
</p>
<p>
In music, this has the very pragmatic side effect that a conductor can
quickly and efficiently work with an orchestra that is playing a piece that
the conductor has committed to memory. The same is true in software. No
need to look up that function from the API documentation. And you&#8217;re
more likely to find the &quot;optimal&quot; solution to a problem, if you
are intimately familiar with the tools available to do the job. You can
drive a screw into a board with a hammer, but if only you knew about that
screw driver, life would be much easier.
</p>
<h3>Longer Term/Esoteric</h3>
<p>
Unless you have photographic memory, reconstructing large pieces of code in
your mind is an extremely difficult thing to do. If you&#8217;re like me,
you have trouble committing even small pieces to memory. This is like
weight lifting for the mind. You will develop new &quot;muscles&quot; that
you never knew you had. Your mind will find new ways to associate,
generalize, and ultimately simplify the complexities of the software for
you. Be warned that you might not see it or feel it after one
attempt&#8212;or even 10. Another analogy from music: Do you think jazz
improvisers actually think of the name and finger position of every note
they play before they play it? The answer is &quot;no&quot;. Their minds
can&#8217;t work that fast. The details get grouped into gestures and
generalizations&#8212;most of them completely subconcious.
</p>
<p>
And, of course, if you believe the scientists and Buddhist scholars
involved with the Mind and Life Institue (<a
href="http://www.mindandlife.org">www.mindandlife.org</a>), you may
potentially develop your mental abilities in a way that would contribute to
any activity requiring concentration, including the quest for happiness. :)
</p>
<h2>Questions</h2>
<ul>
<li>Are there pieces of code or styles of design that are easier to visualize
than others?

</li>
<li>What seems to drive your ability to hold certain pieces of code in your
mind over others?

</li>
<li>Do you think these drivers are the same for everyone, or do they vary by
individual? Might this realization affect the way you write your own code?

</li>
<li>What mental tricks might you subconciously be developing to manage this
complexity?

</li>
</ul>
<p>
(1) &quot;Destructive Emotions: A Scientific Dialogue with the Dalai
Lama&quot; - Daniel Goleman (<a
href="http://www.amazon.com/exec/obidos/tg/detail/-/0553801716/qid=1054992768/sr=8-1/ref=sr_8_1/104-2641040-4275932?v=glance&s=books&n=507846">www.amazon.com/exec/obidos/tg/detail/-/0553801716/qid=1054992768/sr=8-1/ref=sr_8_1/104-2641040-4275932?v=glance&s=books&n=507846</a>)
</p>
<h3>Sidenote</h3>
<p>
This isn&#8217;t really a &quot;Kata&quot; (<a
href="http://www.pragprog.com/pragdave/Practices/CodeKata.rdoc,v">www.pragprog.com/pragdave/Practices/CodeKata.rdoc,v</a>).
It doesn&#8217;t really fall into the Kumite or Koan categories (<a
href="http://www.pragprog.com/pragdave/Practices/MoreKata.rdoc,v">www.pragprog.com/pragdave/Practices/MoreKata.rdoc,v</a>)
either. But, it&#8217;s definitely an example of Practice (<a
href="http://www.chadfowler.com/index.cgi/Computing/Programming/Bowling.html">www.chadfowler.com/index.cgi/Computing/Programming/Bowling.html</a>),
though a somewhat strange one. And in case you&#8217;re wondering,
I&#8217;m not Buddhist.
</p>
