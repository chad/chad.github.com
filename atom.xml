<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chad Fowler]]></title>
  <link href="http://chadfowler.com/atom.xml" rel="self"/>
  <link href="http://chadfowler.com/"/>
  <updated>2014-01-23T06:48:47+01:00</updated>
  <id>http://chadfowler.com/</id>
  <author>
    <name><![CDATA[Chad Fowler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[War On Crunch Mode]]></title>
    <link href="http://chadfowler.com/blog/2014/01/22/the-crunch-mode-antipattern/"/>
    <updated>2014-01-22T09:42:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/22/the-crunch-mode-antipattern</id>
    <content type="html"><![CDATA[<p>In the software industry, especially the startup world, Crunch Mode is a ubiquitous, unhealthy antipattern. Crunch Mode refers to periods of overtime work brought on by the need to meet a project deadline. Developers stereotypically glorify the ability and propensity to stay up all night grinding through a difficult problem. It&#8217;s part of our folklore. It&#8217;s part of how we&#8217;re measured. It&#8217;s something companies and leaders take advantage of in order to accomplish more with less.</p>

<p>And it&#8217;s stupid.</p>

<p>If you want a &#8220;knowledge worker&#8221; to be as ineffective and produce the lowest level of quality possible, deprive them of their sleep and hold them to an unrealistic deadline. In other words, activate Crunch Mode.</p>

<h2>Why Not to Crunch?</h2>

<ul>
<li>It makes us stupid. The more I work, the less relevant my years of experience become. I constantly make rookie mistakes. I break things in production. I leave messes behind. I waste hours going down the wrong train of thought.</li>
<li>It burns people out, sometimes permanently. They burn up their passion that takes down time to replenish. Unless the non-Crunch work is sufficiently energizing (and frequent), enough crunching can cause your best people to leave.</li>
<li>It makes people lazy. This may seem ironic, but when someone puts in heroic levels of effort, they start to place less value on each minute. I know that if I work all night, then an hour brain-break mid-day sounds very reasonable. The problem is that these breaks become a habit that can persist between Crunch times.</li>
<li>It&#8217;s a risky way to make your commitments. Crunch Mode means you are using your team beyond capacity. That&#8217;s like trying to drive 50km on 40km of gas. It <em>might</em> be OK, but if you do it all the time you&#8217;re going to end up broken down on the side of the road waiting for help at some point. Maybe more often than not.</li>
<li>Accountability is lost. When someone is working all hours, they can&#8217;t be blamed for mistakes. They can&#8217;t be blamed for coming in late, forgetting an email, introducing bugs, not writing tests, cutting technical corners, and doing all sorts of things that <em>don&#8217;t</em> describe how you want people on your team behaving.</li>
<li>It puts the credibility of management in question every time. Because, managers, believe it or not, every single time it happens, the entire team asks themselves, &#8220;But why?&#8221;</li>
<li>It shows a team that the leader cares about meeting a business goal more than he or she cares about their health. This may sound harsh but it is literally true.</li>
</ul>


<p>The more you have to use your brain, the less effective and healthy Crunch Mode is. In fields that require less creativity and though, it might even really work as a (ruthless) management technique. In software development, it just doesn&#8217;t.</p>

<h2>Why do we do it?</h2>

<p>The number one reason teams go into Crunch Mode is that their leaders have failed to understand and/or set realistic expectations for the time it takes to complete a project. In worst cases, the deadlines are arbitrarily set by management and not tied to any specific business need. In other cases, the deadlines are inflexible, but the scope can and should be adjusted to a realistic level. Sure, it may be that the team committed to those incorrect deadlines, but it&#8217;s up to the ones <em>deciding</em> on the deadlines to verify that they&#8217;re realistic before making a commitment.</p>

<p>Fear and the resulting breakdown of communication also drive us into Crunch Mode.  &#8220;Can you get this done by <insert very important date here>?&#8221;  &#8220;Uh&#8230;yes?&#8221;  Developers fear saying &#8220;no&#8221;.  Managers fear looking bad by committing to what seem like far off dates.  Managers fear setting far off deadlines, because developers miss dates more often than not. &#8220;If we pad the estimates are we going to miss <em>those</em> by 20% too?&#8221;</p>

<p>Another reason we go into Crunch Mode is that we are perpetuating a culture of cowboy heroism which many of us unwittingly get caught up in. The feeling of finishing tons of work in a short period and depriving oneself of quality personal time can be addicting, especially when it results in &#8220;saving the day&#8221; for a project. Rolling up your sleeves and cranking to the end of a deadline makes you feel valuable in a very <strong>concrete</strong> way. Without your overtime, the project doesn&#8217;t get done on time. With it, the project is saved. It&#8217;s hard to find such black and white ways to add value in daily &#8220;normal&#8221; work.</p>

<p>Maybe the most addictive feature of Crunch Mode is it&#8217;s the easiest way to see a team <em>really</em> click.  At the beginning of Crunch Mode, people get intensely focused. Communication is streamlined. The big important stuff gets tackled quickly and finished. A team can initially raise its skill level a notch with the focus alone. It feels great as both a manager and a team member to work that efficiently and effectively. Unfortunately it&#8217;s difficult (not impossible) to work this way all the time, so we&#8217;re tempted to activate Crunch Mode on occasion just to feel this way again.</p>

<h2>Alternatives to Crunch-Mode</h2>

<ul>
<li>Miss the deadline. Ya, that&#8217;s right. Let your customers down this time. Make less money. Incur opportunity cost. Just fail. You already failed to manage your team and your time. Maybe you should let than have more visible consequences?</li>
<li>Set smaller goals. When you set a massive goal, way off in the future, it&#8217;s impossible to estimate whether it&#8217;s actually realistic. However, if you set a goal for this afternoon, you&#8217;re probably going to be pretty accurate with your estimates.</li>
<li>Measure progress concretely and in small steps. Never trust a status report, even from yourself. In software, the only deliverable that matters is one that you can execute.</li>
<li>Set more realistic goals for the team and problems you face. If you&#8217;re continually having to slip into Crunch Mode, you clearly don&#8217;t understand your capabilities. Admit that you&#8217;re going to go slower than you expected and adjust for it.</li>
</ul>


<p>As unhealthy, counterproductive, and just plain stupid as Crunch Mode is, sometimes you just <em>have</em> to do it.  We all accept that.  Crunch Mode is the nuclear option. A leader <em>needs</em> to have it available as a tool, but each time he or she wields this tool, he or she pays in long term credibility and trust.</p>

<h2>Can we stop it?</h2>

<p>It&#8217;s time to <em>finally</em> stop this insanity. Think of the time, money, energy, and potential happiness wasted on poor planning, communication, and leadership.</p>

<p><strong>Managers</strong>, hold yourself accountable for Crunch Mode when it happens. See it as a personal failure.</p>

<p><strong>Everyone else</strong>, hold yourself accountable for every non-crunch minute you work. Make them count. Overcommunicate. Focus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Having Something to Say]]></title>
    <link href="http://chadfowler.com/blog/2014/01/21/on-having-something-to-say/"/>
    <updated>2014-01-21T10:00:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/21/on-having-something-to-say</id>
    <content type="html"><![CDATA[<p>The first time I was invited to give a keynote speech, I thought &#8220;Why would they want me? I have nothing to say.&#8221; The second time was a few months later. Same thing. What should I talk about? What&#8217;s worth listening to?</p>

<p>Previously I had been asked by <a href="http://pragprog.com">my favorite publisher</a> to write a book. But, what should it be about? I don&#8217;t really have much interesting to say. I&#8217;m just learning, after all.</p>

<p>Now it&#8217;s about ten years later. I&#8217;ve written and contributed to several books. I don&#8217;t know how many conferences I&#8217;ve spoken at anymore or even how many countries I&#8217;ve been invited to.  Still, when I receive a request to speak or am asked my thoughts on a topic by a stranger, I think to myself, &#8220;But, why? What do I have to say?&#8221; I&#8217;m still learning, after all.</p>

<p>I started writing my second book, <a href="http://pragprog.com/book/rr2/rails-recipes">Rails Recipes</a>, roughly a month after I started actually using Rails full time at work. Compared to a lot of other people I knew, I was unqualified to write it. I was going to have to learn a lot in order to write anything at all.  I was even going to have to learn what I needed to learn!</p>

<p>The only thing I had to say about Rails at the time is &#8220;I don&#8217;t know what to say about Rails&#8221;.</p>

<p>By the time I finished the book I had written many small Rails applications and worked on one large one extensively. I had also read almost every line of code in the book and made some fairly decent contributions to the framework.  By the end of the book project, I was an expert.  I had a <em>lot</em> to say about Rails.</p>

<p>But I think one of the reasons the book resonated so well with new Rails developers is that it was written from the fresh perspective of someone still learning.</p>

<p>I saw <a href="http://martinfowler.com">Martin Fowler</a> give a lecture in Bangalore 11 years ago. He said something that has stuck with me ever since: &#8220;Whenever I want to really learn about something, I write a book about it.&#8221; To most people, like me, this is counter-intuitive, but my own history has shown me that it makes a <em>lot</em> of sense.</p>

<p>So, these days, while casting about for something worth saying, I just ask myself, &#8220;What do I wish I had something to say about?&#8221; and I explore that topic aloud. Sometimes it falls flat, and sometimes it results in content that helps me and other people get through the world a little easier.</p>

<p>Don&#8217;t be afraid of not knowing enough or not being experienced enough to help people with your words. The worst case is you learn something in the process. The best case is you create something remarkable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rule One of Management: First, Do No Harm]]></title>
    <link href="http://chadfowler.com/blog/2014/01/19/rule-one-of-management-first-do-no-harm/"/>
    <updated>2014-01-19T14:20:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/19/rule-one-of-management-first-do-no-harm</id>
    <content type="html"><![CDATA[<p>Primum non nocere, or &#8220;first, do no harm&#8221; is a universal principle among healthcare professionals worldwide. It essentially means this: given a (bad) situation, your first priority is to not make it <em>worse</em> through your actions. Doctors hold a position of power over their patients. Most patients are unqualified to diagnose and treat themselves, so they must trust the education, experience, and skill of the doctor. A doctor can significantly (even terminally) affect a patient&#8217;s life.</p>

<p>I propose &#8220;first, do no harm&#8221; as a principle to apply in every situation where the do-er has a position of power over those his or her actions affect. Like managers.</p>

<p>Managers hold a position of power in an organization. A manager having a bad day can make a decision that changes the course of years of multiple people&#8217;s lives. A managerial decision can destroy morale, burn people out, or even ruin another person&#8217;s career.</p>

<p>Couple this power with the typical human need  to <em>do something</em>, and we have a problem on our hands.  As people, we grow anxious when we&#8217;re in a position in which we don&#8217;t feel we&#8217;re actively doing anything. Especially for new managers, this can drive a person crazy.  You&#8217;re used to being the producer who gets things done, and suddenly you&#8217;re in meetings and you aren&#8217;t the one producing anymore.  How do you measure your productivity?</p>

<p>In the worst case, you base it on something like the number of decisions you make or the number of processes you change.</p>

<p>Try to remember the last time you were in a job and things got screwed up because a manager was out of the office.  Now try to remember the last time things were screwed up because of an offhand comment, a sarcastic remark, a poorly timed email, or a decision some manager made.</p>

<p>At a tactical level, the risks of managerial action far outweigh the risks of inaction.</p>

<p>Therefore, managers&#8211;especially you first-time new managers, please don&#8217;t feel pressured to just <em>do something</em>. Be reasoned and careful when you encounter a new problem.</p>

<p>Rule number one is: First, do no harm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your most important skill: Empathy]]></title>
    <link href="http://chadfowler.com/blog/2014/01/19/empathy/"/>
    <updated>2014-01-19T09:10:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/19/empathy</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> - Empathy is the most important skill you can practice. It will lead to greater success personally and professionally and will allow you to become happier the more you practice.</p>

<p>I&#8217;ve never considered myself a <em>real</em> programmer.  I know at this point it&#8217;s probably silly to say, but I started my scholastic and professional life as a musician, and I&#8217;ve never quite recovered from the <a href="http://en.wikipedia.org/wiki/Impostor_syndrome">Impostor Syndrome</a> that comes with making such a shift. One of the faux-self-deprecations I use to describe myself is: &#8220;I&#8221;m a people person who just <em>happens</em> to express this tendency through programming and technology projects&#8221;.</p>

<p>This seems a bit ironic, because I&#8217;m also a very strong introvert. I recharge when I&#8217;m alone or in very small groups of people (no more than 2 including myself is ideal) and I exhaust myself in crowds or in constant discussion.</p>

<p>But, on reflection this all fits together perfectly.  The reason crowds of people exhaust me is that I am constantly trying to read and understand the feelings and motivations of those around me. If I could just go through life talking and not listening, hearing but not processing, alone time and time in groups wouldn&#8217;t be so different for me. But I can&#8217;t, and I obviously don&#8217;t think I should.</p>

<p>Coming back to the impostor-syndrome-induced self-identification as a &#8220;people person&#8221; rather than a programmer, I guess when I say that I&#8217;m probably right.  I spend much more time and much more effort learning how to understand the people around me than I do code, systems, architectures, and technologies. I&#8217;m not an expert or even remarkable at it, but I work on it consciously and consistently. The <em>it</em> I&#8217;m describing here is called &#8220;empathy&#8221;.</p>

<blockquote><p>the action of understanding, being aware of, being sensitive to, and vicariously experiencing the feelings, thoughts, and experience of another of either the past or present without having the feelings, thoughts, and experience fully communicated in an objectively explicit manner</p><footer><strong>Merriam Webster</strong> <cite><a href='http://www.merriam-webster.com/dictionary/empathy'>Empathy</a></cite></footer></blockquote>


<p>As exhausting as it is for me, this is the primary reason for the success and good fortune I&#8217;ve enjoyed in my life.</p>

<h2>Why practice empathy?</h2>

<p>Why should you explicitly work to enhance your ability to empathize with others?</p>

<ul>
<li>You will be more likely to treat the people you care about the way they wish you would treat them.</li>
<li>You will better understand the needs of people around you.</li>
<li>You will more clearly understand the perception you create in others with your words and actions.</li>
<li>You will understand the unspoken parts of your communication with others.</li>
<li>You will better understand the needs of your customers at work.</li>
<li>You will have less trouble dealing with interpersonal conflict both at home and at work.</li>
<li>You will be able to more accurately predict the actions and reactions of people you interact with.</li>
<li>You will learn how to motivate the people around you.</li>
<li>You will more effectively convince others of your point of view.</li>
<li>You will experience the world in higher resolution as you perceive through not only your perspective but the perspectives of those around you.</li>
<li>You will find it easier to deal with the negativity of others if you can better understand their motivations and fears. Lately when I find myself personally struggling with someone, I remind myself to empathize and I immediately calm myself and accept the situation for what it is.</li>
</ul>


<p>You will be a better leader, a better follower, and most important, a better friend.</p>

<h2>How to practice</h2>

<p>Here are a few ideas on how to practice to develop your empathy.</p>

<h3>Listen</h3>

<p>Listen intently when people speak to you. Conversations, especially regarding heated topics, often form a rhythm of back and forth speaking, with each party starting a point just before the conversation partner has ended his or her point.  I&#8217;m sure you will recognize this pattern in yourself if you think about it. Before whoever is speaking has finished, you have already formulated your response, and you can&#8217;t wait to spit it out.</p>

<p>Next time you find yourself in a conversation like this, slow down.  Force yourself to listen to the words you&#8217;re hearing. Consider the speaker&#8217;s motivation behind saying what he or she is saying. Consider the life and work experience that has led to his or her current world-view.</p>

<p>Respond visually and with sound (&#8220;ah&#8221;, &#8220;oh&#8221;, &#8220;ya?&#8221;) but allow at least a second to pass before responding verbally.  Ask followup questions to better understand what the speaker intended or how they feel before you respond with your own opinions.</p>

<p>Hopefully you&#8217;ll need more time before you speak, because you&#8217;ve been too focused on the speaker to start preparing your response.</p>

<h3>Watch and Wonder</h3>

<p>Put down your cell phone. Instead of checking twitter or reading articles while you wait for the train or are stuck in a traffic jam, look at the people around you and imagine who they might be, what they might be thinking and feeling, and where they are trying to go right now. Are they frustrated? Happy? Singing? Looking at their phones? Do they live here or are they from out of town?</p>

<p>Have they had a nice day? Try to actually wonder and care.</p>

<h3>Know Your Enemies</h3>

<p>Maybe &#8220;enemies&#8221; is an exaggeration here, but think about a tense, preferably ongoing dispute you have with someone. Maybe it&#8217;s a co-worker in a competing faction for how you should do some critical part of your work. Maybe it&#8217;s a family member you&#8217;re constantly warring with for some reason. Whoever it is, you&#8217;re used to them being wrong and you being right.  You tend to even jump to disagreeing with them regardless of what they are arguing for, because you are on opposite sides of the war.</p>

<p>Now imagine the entire situation from that person&#8217;s point of view. The person is probably not evil or an idiot. They might not even be <em>wrong</em> about whatever it is you disagree about. In my own life, the problem is usually more of a fundamental philosophical difference than about the specific conflicts that occur.</p>

<p>How does this person feel about how you respond to them when you disagree?  What fears cause the other person to be tense and hard to reason with? How do you exacerbate those fears rather than calm them? What <em>valid</em> arguments could this person make against your views and your handling of the situation? What <em>good</em> intentions does this person hold? What are the positive motivations behind what you perceive as a negative outcome? Do you agree with the motivations? If so, are they more important than the specific conflict?</p>

<p>If you&#8217;re like me, just going through this exercise (maybe a couple of times with the same subject) can greatly reduce your frustration and anxiety over some of the most stressful inter-personal situations. It may sound obvious, but doing it is very different from understanding how it could work.</p>

<h3>Choose the Other Side</h3>

<p>While talking with <a href="http://kellyjeanne.wordpress.com/">Kelly</a> about practicing empathy, she had a great idea. It&#8217;s hard to side with your own &#8220;enemy&#8221; as I suggested above. It requires a forced third person perspective, which takes a lot of discipline when you&#8217;re thinking about your own stress and emotions.</p>

<p>So to make it easier, try it as an actual third person. We all have friends and loved ones that <em>complain</em> to us about how they have been treated by other people. It&#8217;s human nature to complain and it&#8217;s the duty of a loved one to listen sympathetically.  The assumption is that the listener is on the side of the complainer. A supportive friend or loved one almost always is, instinctually.</p>

<p>Try practicing (internally) taking the opposing view point. Don&#8217;t go with your default reaction immediately. Start on the other side and work your way back.</p>

<p>This reminds me of a cool technique Dave Thomas blogged about several years (almost 11 years ago, wow!) ago called <a href="http://pragdave.blogspot.de/2003/06/debating-with-knives.html">debating with knives</a>.  It&#8217;s an exercise which forces you onto both sides of a debate to help open your mind to the realities of the topic under discussion.</p>

<hr/>


<p>This is probably all obvious, but I doubt many people really <em>practice</em> empathy. I hope you will give it a try, even for a short while, and I hope it improves your life and the lives of those around you even if just a little.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Eggs]]></title>
    <link href="http://chadfowler.com/blog/2013/08/13/about-eggs/"/>
    <updated>2013-08-13T08:27:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/08/13/about-eggs</id>
    <content type="html"><![CDATA[<p>This week&#8217;s Passionate Programmer excerpt is a warning against placing too strong a bet on technology you don&#8217;t control. It&#8217;s funny how dated it sounds. Case in point, I guess.</p>

<p><a href="http://chadfowler.com/passionate-programmer/eggs.html">Don&#8217;t Put All Your Eggs in Someone Else&#8217;s Basket</a>.</p>

<p>As a side note, it was in <a href="http://pragdave.pragprog.com">Dave Thomas&#8217;s</a> original edits for the book in 2005 that, through his pull-quote &#8220;Vendor-centric views are typically myopic&#8221;, I learned the word &#8220;myopic&#8221;. I&#8217;ve learned two other words from Dave in my life: &#8220;anodyne&#8221; and &#8220;octothorpe&#8221;. Thanks, Dave!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Panic - Passionate Programmer Excerpt]]></title>
    <link href="http://chadfowler.com/blog/2013/07/23/how-not-to-panic-passionate-programmer-excerpt/"/>
    <updated>2013-07-23T07:46:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/07/23/how-not-to-panic-passionate-programmer-excerpt</id>
    <content type="html"><![CDATA[<p><a href="http://chadfowler.com/blog/2013/07/16/passionate-programmer-a-free-excerpt-almost-every-week/">As I mentioned last week,</a> I&#8217;m releasing chapters of <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">The Passionate Programmer</a> every(ish) week until they&#8217;ve all been posted.</p>

<p>This week&#8217;s chapter is one I actually re-read myself sometimes as a reminder. It&#8217;s about how to stay calm  and focused in the face of stress. It&#8217;s one of the most important lessons I&#8217;ve learned (and continue to learn) throughout my career and applies to every job I&#8217;ve had. Too often, our reaction to stress is to freak out and <em>just</em> <em>start</em> <em>trying</em> <em>shit</em>.</p>

<p>In the chapter, I mention a Doom deathmatch player who went by the name &#8220;Noskill&#8221;.  I learned after the release of the book that Noskill aka Chris Crosby had <a href="http://doomwiki.org/wiki/Chris_Crosby_(NoSkill)">died in a car accident at the age of 23</a>. As weird as it is, I hope Chris&#8217;s family discovers that he somehow influenced my career and appeared in a book for software developers, perhaps some of whom will go on to work on the games he loved so much.</p>

<p>Anyway, here it is.  <a href="http://chadfowler.com/passionate-programmer/panic.html">Don&#8217;t Panic</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Six Years of Ignorance]]></title>
    <link href="http://chadfowler.com/blog/2013/07/22/my-six-years-of-ignorance/"/>
    <updated>2013-07-22T10:09:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/07/22/my-six-years-of-ignorance</id>
    <content type="html"><![CDATA[<p>Six years ago, I gave up a bad habit.  Since 1999 I had been using RSS then Atom as my interesting-stuff changelog.  I eventually amassed a subscription collection of hundreds of feeds with subjects ranging from the obvious (tech news and software development) to religion, philosophy, language, and music. Every day, all day, new items
came into my feed reader. I had gotten pretty good at culling uninteresting feeds, so <em>lots</em> of it was relevant and exciting to me. If a tech company was rumored to be in acquisition talks, I knew it. If Rubyists started favoring a new library for accessing relational databases or creating parsers, I knew that.</p>

<p>And the unread items count kept growing. Along with it so did my anxiety over not being &#8220;in the know&#8221;.</p>

<p>So six years ago, I deleted the feed reader from my computer and removed every trace of my RSS + Atom collection from the internet so it could not tempt me. What started as a month-long experiment while traveling through Europe ended as the new norm.</p>

<p>But how do I keep in touch with what&#8217;s happening? How do I avoid being completely ignorant?</p>

<p>I guess I don&#8217;t. I am ignorant of most of what&#8217;s changing day to day in the software industry. So far that&#8217;s working out fine for me. When something becomes more than just a community- or industry-wide distraction, I learn about it. And because I&#8217;m not so distracted trying to keep up with <em>everything</em>, I have time to catch up on the things that matter.</p>

<hr />

<p>I was reminded of this today when I read MG Siegler&#8217;s <a href="https://medium.com/tech-blogging/43d78a82e103">assertion that very little of what you read on the internet is actually true</a>, which was sent to me via email by a colleague.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passionate Programmer - A free chapter (almost) every week until it's done]]></title>
    <link href="http://chadfowler.com/blog/2013/07/16/passionate-programmer-a-free-excerpt-almost-every-week/"/>
    <updated>2013-07-16T09:15:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/07/16/passionate-programmer-a-free-excerpt-almost-every-week</id>
    <content type="html"><![CDATA[<p>Starting today I&#8217;m going to post a free excerpt from <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">The Passionate Programmer</a> every week (time permitting) until I&#8217;ve posted them all. (Thanks to <a href="http://pragprog.com">my generous publisher</a> for allowing this!)</p>

<p>If you have read it and wished you could share sections with friends and co-workers that don&#8217;t own the book, now&#8217;s your chance. If you haven&#8217;t read it and really don&#8217;t want to spend money on it, you can read it for free (out of order) over the course of the next year.</p>

<p>I&#8217;d love to hear your reactions (via twitter, blog posts, hacker news comments, etc.) to each chapter as I post them. I released the first edition of the book eight years ago, and I always hear bits and pieces of feedback on the book in general. I&#8217;m hoping this gives me and the book&#8217;s readers a chance to focus discussion on each concept.</p>

<p>The first post is one of my favorites and one that gets little attention. It&#8217;s about &#8220;value rigidity&#8221; and the human tendency to hold on to things that are important to them so tightly that they can&#8217;t detect a change in context. I talk about this concept somewhat narrowly in the book, but I constantly see its application in daily life.  For me it&#8217;s a very useful mirror in which to inspect my behaviors.</p>

<p>Here it is: <a href="http://chadfowler.com/passionate-programmer/">The South Indian Monkey Trap</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components]]></title>
    <link href="http://chadfowler.com/blog/2013/06/23/immutable-deployments/"/>
    <updated>2013-06-23T18:57:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/06/23/immutable-deployments</id>
    <content type="html"><![CDATA[<p>As a developer and sometimes system administrator, one of the scariest things I ever encounter is a server that&#8217;s been running for ages which has seen multiple upgrades of system and application software.</p>

<p>Why? Because an old system inevitably grows warts. They start as one-time hacks during outages. A quick edit to a config file saves the day. &#8220;We&#8217;ll put it back into Chef later,&#8221; we say, as we finally head off to sleep after a marathon fire fighting session.</p>

<p>Cron jobs spring up in unexpected places, running obscure but critical functions that only one person knows about. Application code is deployed outside of the normal straight-from-source-control process.</p>

<p>The system becomes finicky. It only accepts deploys in a certain manual way. The init scripts no longer work unless you do something special and unexpected.</p>

<p>And, of course the operating system has been patched again and again (in the best case) in line with the standard operating procedures, and the inevitable entropy sets in.  Or, worse, it has never been patched and now you&#8217;re too afraid of what would happen if you try.</p>

<p>The system becomes a house of cards. You fear any change and you fear replacing it since you don&#8217;t know everything about how it works.</p>

<p>We&#8217;ve tried lots of ways to avoid this problem over the years from team policy to automation.  We&#8217;re trying a new one now <a href="http://wunderlist.com">at work</a>: Immutable Deployments.</p>

<p>Many of us in the software industry are starting to take notice of the benefits of immutability in software architecture.  We&#8217;ve seen an increased interest over the past few years in functional programming techniques with rising popularity of languages such as Erlang, Scala, Haskell, and Clojure.  Functional languages offer immutable data structures and single assignment variables. The claim (which many of us believe based on informal empirical evidence) is that immutability leads to programs that are easier to reason about and harder to screw up.</p>

<p>So why not take this approach (where possible) with infrastructure? If you absolutely know a system has been created via automation and never changed since the moment of creation, most of the problems I describe above disappear. Need to upgrade? No problem. Build a new, upgraded system and throw the old one away.  New app revision? Same thing. Build a server (or image) with a new revision and throw away the old ones.</p>

<p>At <a href="http://6wunderkinder.com">6Wunderkinder</a>, we have been moving in this direction over the past 4 months.  It&#8217;s giving us the confidence we need to rapidly iterate on our backend infrastructure as we continue to make things faster, more scalable and dependable for our customers and flexible to move our applications forward more freely.</p>

<p>Maybe more remarkable, though, is that like a new programming paradigm, thinking of infrastructure this way changes how I view our systems pretty fundamentally. New patterns and anti-patterns emerge. It is changing how I think not just about deployments but about application code (and even team structure).</p>

<p>This idea is a work in progress for me. We&#8217;re obviously not the first ones to think of it, so there is a lot to learn.  It also implies some kind of &#8220;cloud&#8221; infrastructure, though I think modern software architecture generally does.</p>

<p>Expect to hear more about the tactical details of this from me here and <a href="http://railsisrael2013.events.co.il/presentations/852-disposable-components">at various conferences this year</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Give a Keynote]]></title>
    <link href="http://chadfowler.com/blog/2013/06/08/how-to-give-a-keynote/"/>
    <updated>2013-06-08T17:05:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/06/08/how-to-give-a-keynote</id>
    <content type="html"><![CDATA[<p>I&#8217;m not sure how it happened, but out of the many conferences in which I&#8217;ve spoken, I&#8217;ve only submitted two talk proposals.
Both were to O&#8217;Reilly&#8217;s OSCON. One was in 2003. It was not accepted. Too bad; It would have been really good. The next was in 2004.
It was accepted. It wasn&#8217;t all that great.</p>

<p>Every other time, I&#8217;ve been asked to speak&#8211;usually to give a keynote.</p>

<p>So before my first keynote speech, I had only delivered one conference talk. And I didn&#8217;t think it wasn&#8217;t any good (sorry OSCON 2004!). When the organizers of this conference contacted me,
I responded and said the following, &#8220;I&#8217;d love to do this and I&#8217;m thrilled to be asked. Just to avoid embarrassment, though, are you sure you didn&#8217;t mean to
email <a href="http://martinfowler.com">Martin Fowler</a>?&#8221; Apparently they had a nice laugh and then responded
saying they really meant me.</p>

<p>My next feeling was not relief. It was terror. It was a great honor to be asked to keynote at <em>anything</em>. But, why me? What would I speak about? What the hell is a keynote anyway?</p>

<p>As I did with many new challenges back then, I turned to my friend <a href="http://pragprog.com">Dave Thomas</a>. &#8220;Dave, they asked me to keynote and they didn&#8217;t mean Martin. What do I do?!&#8221;
Dave was kind enough to give me the single most useful piece of advice I&#8217;ve ever gotten as a keynote speaker.</p>

<p>He said something like &#8220;Keynotes are after-dinner entertainment. Don&#8217;t try to teach them. Just keep them entertained and leave them with something to think about.&#8221;</p>

<p>So I did that and I think it went well.  In fact, at this particular conference, <a href="http://david.heinemeierhansson.com/">one of the other keynote speakers</a> got snowed in at home in Chicago and couldn&#8217;t make it.
So for my first keynote appearance, I actually gave two. One planned and one that I wrote while at the conference. Pretty good practice!</p>

<p>Since then I&#8217;ve done enough of them in enough different circumstances (conference types, countries, with and without live translation, remotely via video, etc.) that I&#8217;ve had the chance to fail and succeed in a number of different ways. Occasionally, a friend or colleague encountering their first keynote calls or writes and says &#8220;Chad, they asked me to keynote. What do I do?!&#8221;</p>

<p>Here are some answers:</p>

<ul>
<li>Dave was absolutely right. Entertain and provoke thought.</li>
<li>Do not introduce yourself. If you&#8217;re a keynote speaker, they probably already know who you are anyway. If they don&#8217;t, they won&#8217;t care while you introduce yourself.</li>
<li>Tell a personal story. Among other reasons, it will loosen you up and allow you to communicate better with your audience. A personal story is easier to deliver unrobotically than the programmed content you might be crafting. So use it to connect with the audience and to motivate the message of your talk.</li>
<li>Be vulnerable. Subtly admitting that you&#8217;re imperfect and not completely certain about everything puts you in the right frame of mind to engage with the people listening to you and to avoid the trap of trying to appear to be right about everything.</li>
<li>Don&#8217;t try to prove yourself. You&#8217;ve already been asked to keynote. If you get insecure and spend time proving why you&#8217;re the right person to be speaking on your topic it will sound like you&#8217;re arrogant, which you probably aren&#8217;t.</li>
<li>Converse with the audience. I personally look into the eyes of the people listening to me in exactly the same way I would if I were having a conversation over coffee. I go on a tangent and I can see that they&#8217;re bored so I change my approach. They might not be directly speaking to you, but they communicate with their reactions, and letting the communication happen in two directions is extremely important for both you and the listener.</li>
<li>Say significantly less than you think you need to. Don&#8217;t fall into the trap of trying to cram in as much as you can. Kent says this better than I will:</li>
<li>Read and apply Kent Beck&#8217;s <a href="https://www.facebook.com/note.php?note_id=536820369684165">three focusing questions</a></li>
<li>Create a story arc and apply a little drama if you can. There are many devices you can use for this. Watch your favorite speakers, and see how they use foreshadowing, repetition, rhythm, etc. Dave Thomas is amazingly gifted at this.  <a href="http://www.confreaks.com/presenters/137-dave-thomas">Find some of his keynotes and watch for how he does it.</a></li>
<li>Express your opinions unapologetically. You&#8217;re a human&#8211;not an information dispenser. People can look up facts on the internet.  They&#8217;re at the conference to listen to your perspective on things.</li>
<li>Leave your audience with something to wonder about. Unanswered questions are OK in a keynote.</li>
</ul>


<p>I&#8217;m not the greatest keynote speaker to have ever lived, but I try to do them well and constantly aspire to be better. As with everything I write or speak about, I hope these tips are meaningfully helpful to at least one person.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to get your conference talk accepted]]></title>
    <link href="http://chadfowler.com/blog/2013/05/25/how-to-get-your-conference-talk-accepted/"/>
    <updated>2013-05-25T16:33:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/05/25/how-to-get-your-conference-talk-accepted</id>
    <content type="html"><![CDATA[<p>I am one of the original organizers of both <a href="http://rubyconf.org">RubyConf</a> and <a href="http://railsconf.com">RailsConf</a>.  Combined, I&#8217;ve organized or been on the program committee for around 25 conferences.  I&#8217;ve read hundreds of proposals and seen hundreds of conference talks.</p>

<p>Occasionally, a proposal or a talk stands out. Here&#8217;s one that I still think of when new would-be speakers ask how to get their first talk accepted. When preparing for RailsConf 2010 in Baltimore, we received this email from <a href="https://twitter.com/r00k">Ben Orenstein</a>:</p>

<p><img src="https://www.evernote.com/shard/s10/sh/f55ad33d-1d6b-4b65-a99f-101cbbb0102f/e65102090bed40292d838dbea4519ed4/deep/0/Screenshot%205/25/13%204:37%20PM.png"></p>

<p>Ben had never spoken at a conference before, and he knew we had a lot of proposals to consider.  Here&#8217;s what I like about his email (and <a href="http://www.youtube.com/watch?v=pg33EQCdMxw">video</a>):</p>

<ul>
<li>Most important, he showed us how enthustiastic he to give the talk. Enthusiasm is one of the most sorely lacking features of technical conference talks. When someone is excited, I am more engaged.</li>
<li>He reassured us that, though we might not have heard of him before, he was qualified to give the subject a good treatment.</li>
<li>He told us he was going to be prepared when the conference rolled around. It&#8217;s rare that a conference presenter explicitly says &#8220;I am going to be ready&#8221;.</li>
<li>He went to the trouble to make a video which showed us both what his style might be like in person and again that he really wanted this opportunity to speak.</li>
</ul>


<p>I immediately looked up his proposal, and as you might guess it was as thoughtful and energetic as the email and video.</p>

<p>I then sent my <a href="http://benscofield.com/">conference co-chair, Ben Scofield</a>, the following email:</p>

<p><img src="https://www.evernote.com/shard/s10/sh/c94adab6-544d-42a0-8dc8-8a0204a2f7c4/adf24b4fa91301619dbdd76a0c0bd6d2/deep/0/Screenshot%205/25/13%204:55%20PM.png"></p>

<p>And his response:</p>

<p><img src="https://www.evernote.com/shard/s10/sh/c5578176-2ce1-4df1-ba3d-9bd381702981/3b61f42fb63bbeda938dbb35d8cd0dec/deep/0/Screenshot%205/25/13%205:00%20PM.png"></p>

<p>This is surely only one way to get a talk accepted, but as a new presenter, it&#8217;s a good example to consider.</p>

<p>(You can hear a conversation between me and Ben about this proposal and more at the <a href="http://learn.thoughtbot.com/podcast/44">Giant Robots Podcast</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discipline: Stomp Out Cynicism]]></title>
    <link href="http://chadfowler.com/blog/2013/05/20/discipline-stomp-out-cynicism/"/>
    <updated>2013-05-20T11:36:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/05/20/discipline-stomp-out-cynicism</id>
    <content type="html"><![CDATA[<p>Here&#8217;s an exercise you can put into place right now which will have a lasting, significant, positive effect on your life
and the lives of those you work, live, collaborate, and play with. There are two versions: an easy version and a harder version. Start with the easy
version unless you&#8217;re the kind of person who has to do things the hard way.</p>

<h2>The easy version</h2>

<p>Whenever you have a cynical thought, keep it to yourself. Never utter, write, or otherwise convey it. Put it away. Think it to yourself all day if you have to, but never express it.</p>

<h2>The harder version</h2>

<p>Whenever you have a cynical thought, keep it to yourself. Analyze it. Scrutinize it. Prove it to be wrong. Discover the personal fear within you from which it grew, and make a plan to address that fear
fully. Be thankful to the negative emotion for giving you the opportunity to understand your own weaknesses.</p>

<p>Cynicism is born of laziness and fear: It&#8217;s easy to complain about something. It&#8217;s harder to fix it. It&#8217;s both scary and liberating to trust other people to try to be their best.</p>

<h2>Update</h2>

<p>As <a href="https://twitter.com/dhh">@dhh</a> pointed out on Twitter after I posted this, I worded this more absolutely than intended. I meant this to be an &#8220;exercise&#8221; (see the first sentence). Skepticism is healthy. Sometimes, cynicism is the right reaction. But, I believe most of us could use a lot less of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who I Want to Hire]]></title>
    <link href="http://chadfowler.com/blog/2013/04/09/who-i-want-to-hire/"/>
    <updated>2013-04-09T09:44:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/04/09/who-i-want-to-hire</id>
    <content type="html"><![CDATA[<p>There&#8217;s a person I want to work with. I can&#8217;t find this person. I&#8217;ve literally searched the world,
and I can hardly find a trace.</p>

<p>I&#8217;m not talking about someone specific. In fact, that&#8217;s the problem.  I&#8217;m talking about a set of traits
and an attitude which is more scarce than I realized until recently.  I know a small handful of people who
fit what I&#8217;m looking for, but they&#8217;re busy and unavailable right now.</p>

<p>I was talking to one of these people recently about my desire to, as I put it, &#8220;hire someone like you&#8221;, and we
both realized how hard it is to name really <em>anyone</em> <em>else</em> who fits the description. Given this and the fact that
there are so many <em>bad</em> job descriptions for developers in the world, I&#8217;m writing down what I&#8217;m looking for
in hopes that this person (you?) is out there:</p>

<ul>
<li>Everyone knows that when you take on a task whether it&#8217;s huge and scary or tiny and boring, you&#8217;re going to see it through to the best of your ability.</li>
<li>It&#8217;s <em>obvious</em> to everyone around you that you have fun with your work and with your co-workers.</li>
<li>You care about how your work and attitude affects those around you. I mean <em>really</em> care. If you hurt someone, it hurts you. Everything you do runs through this filter.</li>
<li>You understand that communication is the <em>biggest</em> responsibility of your job as a developer and the one you&#8217;re least likely to get right unless you focus on it.</li>
<li>You focus on shipping software that matters to your users and that matters to the company you&#8217;re building it for.</li>
<li>You&#8217;ve experimented with and survived many different types of development and project methodologies, which has left you with a healthy appreciation for what works from the so-called &#8220;agile&#8221; methodologies and those that came before (and after) them.</li>
<li>You have no time for ceremony. Maybe you even hate it, but &#8220;hate&#8221; is too dogmatic a term.</li>
<li>You are humble enough to bend to the will of the frameworks, technologies, constraints, and <em>people</em> you work with when doing so won&#8217;t have a materially negative impact. In other words, you can play by someone else&#8217;s rules when that&#8217;s the easiest and/or best thing to do.</li>
<li>You make pragmatic (often boring) technology choices at work and you play in your free time. You don&#8217;t build science projects just because you are smart enough to build them.</li>
<li>You are confident enough that you don&#8217;t have to prove to anyone what a great developer you are, and therefore&#8230;</li>
<li>You don&#8217;t mind being the one that looks bad when you deserve it. You make mistakes sometimes, because you&#8217;re human, but rather than dwell on them you choose to fix and then learn from them.</li>
<li>You love to teach and learn from your co-workers.</li>
<li>You are confident with a number of programming languages, operating systems, and architectures. You probably have one of each you prefer right now, but you&#8217;re neither dogmatic nor myopic in your focus on it.</li>
</ul>


<p>From my perspective, these are the things that matter.</p>

<p>I don&#8217;t care if you&#8217;re the smartest person I&#8217;ve ever met.
I don&#8217;t care if you know everything about the technologies I&#8217;m deploying.
I don&#8217;t want a &#8220;rock star&#8221;. I definitely don&#8217;t want a ninja.
I don&#8217;t care if you write books, contribute to Open Source software, or speak at conferences. I do those things, and I know how little they predict how well I do my job.</p>

<p>If this describes you, I definitely want to know you. If you are interested in building scalable APIs and automated infrastructures for those APIs and would like to work with me in Berlin making beautiful productivity software, I <em>definitely</em> want to know you. Please get in touch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[If it stresses you out, it's not your job]]></title>
    <link href="http://chadfowler.com/blog/2013/03/25/if-it-stresses-you-out-its-not-your-job/"/>
    <updated>2013-03-25T19:11:00+01:00</updated>
    <id>http://chadfowler.com/blog/2013/03/25/if-it-stresses-you-out-its-not-your-job</id>
    <content type="html"><![CDATA[<p>I keep learning this lesson over and over again, so I&#8217;m writing it here in an effort to never forget again. As a manager, if some task constantly stresses me out or makes me feel uneasy,
it&#8217;s probably because I&#8217;m doing someone else&#8217;s job.</p>

<p>I don&#8217;t mean someone&#8217;s being lazy and I&#8217;m picking up their slack. I&#8217;m talking about those nagging little annoying things you find yourself doing as infrequently as you can
and do a half-assed job at every time. So you not only stress because they&#8217;re in the way of your <i>real</i> work but you stress because you suck at them.</p>

<p>Every time I allow myself to notice this feeling&#8211;every time I  analyze what&#8217;s causing it, it&#8217;s because I should be delegating this work to someone else. Usually, in a
mature organization, it&#8217;s even obvious <i>who</i> the work should go to.</p>

<p>The beautiful thing about being a manager of people is that your core job includes uncluttering your and everyone else&#8217;s work days by putting the work, moving tasks to a home  where they can be
lovingly completed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm a Wunderkind!]]></title>
    <link href="http://chadfowler.com/blog/2013/02/19/im-a-wunderkind/"/>
    <updated>2013-02-19T15:58:00+01:00</updated>
    <id>http://chadfowler.com/blog/2013/02/19/im-a-wunderkind</id>
    <content type="html"><![CDATA[<p>As I mentioned recently, <a href="http://chadfowler.com/blog/2013/01/08/moving-to-berlin-and-auf-wiedersehen-to-friends/">we&#8217;ve moved to Berlin!</a>.  We got to spend a week of down time exploring the city.  We are definitely in love with Berlin so far!</p>

<p>I&#8217;m excited today to finally announce that I&#8217;ve joined <a href="http://www.6wunderkinder.com/blog/willkommen-chad">6Wunderkinder</a> as CTO. In case you don&#8217;t know them by the company name, 6Wunderkinder are the creators of the extremely popular <a href="http://www.wunderlist.com">Wunderlist</a>, which is a cross-platform, simple, and beautiful productivity application.  I&#8217;m a user, and as I&#8217;ve told friends and family about my move, I&#8217;ve discovered that many of you are too.</p>

<p><a href="http://www.bizjournals.com/washington/blog/techflash/2013/02/former-svp-chad-fowler-on-the-state-of.html">As I&#8217;ve said previously,</a>, I&#8217;ll miss my LivingSocial team and look forward to watching them from here in Berlin, but I&#8217;m extremely excited to get back to hands-on software development with the small, focused, team of brilliant product engineers here at 6Wunderkinder.</p>

<p>For those in the Berlin tech scene, if you happen to see me around at <a href="http://www.sanktoberholz.de/">Sankt Oberholz</a>, please do stop by and say hi :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switched to github page, octopress, and a new design]]></title>
    <link href="http://chadfowler.com/blog/2013/02/15/switched-to-github/"/>
    <updated>2013-02-15T17:35:00+01:00</updated>
    <id>http://chadfowler.com/blog/2013/02/15/switched-to-github</id>
    <content type="html"><![CDATA[<p>Thanks to <a href="http://lynn.io/">Lynn Wallenstein</a>, I have a new web site design. If you see problems with the layout, it&#8217;s almost definitely because I screwed something up after Lynn gave me the code. Sorry, Lynn. :(</p>

<p>I have also used this as a chance to move from my own server (which I&#8217;ve been screwing with for over a decade) to Octopress hosted on Github Pages. I&#8217;m glad to be done with that phase of my life.</p>

<p>Anyway, with Octopress I feel like I&#8217;m stepping back to the simple, productive environment I had ten years ago with <a href="http://rubyforge.org/projects/rublog/">Rublog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Berlin and auf wiedersehen to friends]]></title>
    <link href="http://chadfowler.com/blog/2013/01/08/moving-to-berlin-and-auf-wiedersehen-to-friends/"/>
    <updated>2013-01-08T00:00:00+01:00</updated>
    <id>http://chadfowler.com/blog/2013/01/08/moving-to-berlin-and-auf-wiedersehen-to-friends</id>
    <content type="html"><![CDATA[<p>It&#8217;s hard to believe it&#8217;s been <a href="http://techcrunch.com/2011/03/14/livingsocial-gains-wealth-of-ruby-on-rails-expertise-with-infoether-acquisition/">almost two years</a> since InfoEther was acquired by LivingSocial. Since then, we&#8217;ve built the strongest development team I&#8217;ve ever known. We&#8217;ve set <a href="http://mashable.com/2012/09/06/livingsocial-starbucks-record/">records</a> for e-commerce transaction volume. We&#8217;ve grown at an incredible pace, both as a business and as <a href="http://www.youtube.com/watch?feature=player_embedded&v=14sUms68LwA">technology team</a>. We&#8217;ve shipped a lot of software, and made millions of people&#8217;s lives more interesting in the process.  I&#8217;ve had the privilege to work with <a href="https://coderwall.com/team/livingsocial">some of the most admired engineers in on industry</a>. I&#8217;m proud of the team <a href="http://aaronbatalion.com/">Aaron Batalion</a> (from whom I&#8217;ve learned a ton about running a consumer internet product) had assembled before InfoEther arrived and of the team that ultimately grew from that foundation.</p>
<p><a href="http://www.chadfowler.com/2011/12/21/re-thinking-software-development-education">As I mentioned when I announced</a> our <a href="http://hungryacademy.com">Hungry Academy program</a>, for me personally the experience at LivingSocial has been intense. As I said in that post, “These last 8 months at LivingSocial have been the best 4 years of my career.” That holds true today.</p>
<p>Playing the role of Senior Vice President of Technology and serving on the senior executive team at LivingSocial has been a rewarding learning experience.  I&#8217;m humbled by the talent and experience of every member of that team, and since my first day have been awed by <a href="http://corporate.livingsocial.com/ourteam">Tim O&#8217;Shaughnessy&#8217;s</a> business sense and natural leadership ability.  I look back on my career, and a handful of teachers and mentors stand out that have had a significant impact on me. Tim is now in that very short list.</p>
<p>All the while, though, I&#8217;ve known that I would eventually go back to a more hands-on role, personally building products and solving technical problems. I am, after all, a <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">Passionate Programmer</a>.</p>
<p><a href="http://twitter.com/kellyjeanne">Kelly </a> and I have also had  a goal to (before we get too old to fully enjoy it) live overseas again.  Our time in India, <a href="http://pragprog.com/book/mjwti/my-job-went-to-india">was a huge influence on both of us, both personally and professionally</a>, and we&#8217;ve long since hoped to gain a similar experience in a different part of the world, specifically Europe.</p>
<p>So that&#8217;s what we&#8217;re going to do.  I&#8217;m taking a role as <span class="caps">CTO</span> of a technology startup in one of our favorite cities: Berlin.  I&#8217;ll be working hands-on to develop cross-platform software with a small, talented team of engineers, designers, and product managers. I&#8217;ll be transitioning from my role at LivingSocial for the remainder of January and will be relocated to Berlin and starting the new job in mid February.</p>
<p>As excited as I am to move to the next adventure, it&#8217;s always sad leaving a great company like LivingSocial.  I&#8217;ve made some friendships that will last forever, and I&#8217;ll miss the team immensely. I know, however, that they&#8217;re in good hands and that 2013 is going to be a fantastic year for the business. </p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaving a Legacy System revisited]]></title>
    <link href="http://chadfowler.com/blog/2012/10/29/leaving-a-legacy-system-revisited/"/>
    <updated>2012-10-29T00:00:00+01:00</updated>
    <id>http://chadfowler.com/blog/2012/10/29/leaving-a-legacy-system-revisited</id>
    <content type="html"><![CDATA[<p>Early last year, <a href="http://chadfowler.com/2011/03/17/leaving-a-legacy-system">I posted</a> about how we&#8217;ve unfortunately turned the word &#8220;legacy&#8221; into a bad word in the software industry.</p>
<p>At Nordic Ruby and again at Aloha Ruby Conf this year I <a href="http://confreaks.com/videos/1240-aloharuby2012-legacy">turned this idea into an exploratory presentation</a>.  I think it turned out pretty well and is an important topic.  Watch it and let me know what you think!</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The art/craft/commodity continuum]]></title>
    <link href="http://chadfowler.com/blog/2011/12/27/the-art-craft-commodity-continuum/"/>
    <updated>2011-12-27T00:00:00+01:00</updated>
    <id>http://chadfowler.com/blog/2011/12/27/the-art-craft-commodity-continuum</id>
    <content type="html"><![CDATA[<p>When you create art, the purpose is self-expression.</p>
<p>When you create software, the purpose is rarely self-expression.</p>
<p>When you create software, someone somewhere wants it to perform a set of functions and has a stake in how well those functions are implemented. The definition of &#8220;well&#8221; is up to the stakeholder.</p>
<p>When you create art, you want it to be beautiful, or beautifully ugly, or ornate, or plain. You, the creator, are the stakeholder. You may hope that others find it beautiful, but if they don&#8217;t, it&#8217;s art&#8212;who&#8217;s to say what&#8217;s good and bad?</p>
<p>When you attempt to judge the quality of a commodity good solely in terms of its aesthetic appeal, you ignore the objective evaluation of how well that product meets the needs of its stakeholders.</p>
<p>When you attempt to judge the quality of a piece of art solely on some objective measure, you miss the point of the object as an expression of art.</p>
<p>Craft falls somewhere between commodity and art. Craft items have both subjective, aesthetic appeal and objective function.</p>
<p>This is a beautiful Christian Dior dress:</p>
<p><img src="http://chadfowler.com/images/falf/dior.jpg" alt="" /></p>
<p>Beautiful but largely impractical.  Try to wear this on the subway or even in your car. Try to fit it through a standard door. It&#8217;s a beautiful piece of art, but it fails as a useful article of clothing for most people.</p>
<p>This is a <a href="http://paulsmith.co.uk">Paul Smith</a> suit. It&#8217;s practical, extremely well made, creatively designed, and probably very expensive:</p>
<p><img src="http://chadfowler.com/images/falf/paul-smith.jpg" alt="" /></p>
<p>This is a pair of pants on sale at <a href="http://walmart.com">Wal-Mart</a>:</p>
<p><img src="http://chadfowler.com/images/falf/walmart.jpg" alt="" /></p>
<p>Beautiful?  I don&#8217;t know many people who would call this beautiful. Completely unremarkable.</p>
<p>And so it goes&#8230;from art to craft to commodity.</p>
<p>Now consider yourself as the customer here. My guess is that most of my readers, even with an appreciation of the quality of the Paul Smith suit, would be much more comfortable in the Wal-Mart pants.</p>
<p>When we create an item for another person, we have to consider whether that person is looking for art, craft, or commodity. We may wish to always be creating art. Or craft. But sometimes our customers want commodity. Not only is commodity cheaper but it&#8217;s what they <em>prefer</em>.</p>
<p><img src="http://chadfowler.com/art-commodity-continuum.png" alt="" /></p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-thinking Software Development Education]]></title>
    <link href="http://chadfowler.com/blog/2011/12/21/re-thinking-software-development-education/"/>
    <updated>2011-12-21T00:00:00+01:00</updated>
    <id>http://chadfowler.com/blog/2011/12/21/re-thinking-software-development-education</id>
    <content type="html"><![CDATA[<p>Where have I been lately?  Good question. When asked over these past months, I jokingly say something like, &#8220;These last 8 months at LivingSocial have been the best 4 years of my career.&#8221;</p>
<p>But I don&#8217;t just mean I&#8217;ve been busy. I&#8217;ve been focused on building the best software development team I can to do what I think is some important and industry-changing work in the world of local commerce.</p>
<p>And when I joke about these 8 months being the best 4 years of my career, what I really mean is that I feel like I&#8217;ve learned 4 years worth of lessons and gained 4 years worth of experience. What we&#8217;re doing isn&#8217;t easy. It&#8217;s the kind of work I&#8217;ve always sought out.</p>
<p>I am a self-taught software developer. To date, my formal education consists of two 3-day training classes on specific programming languages (Java many years ago and Erlang in 2008). During my first work experiences in IT, I remember the shock of discovering that a Masters degree in software development doesn&#8217;t necessarily translate to knowing how to effectively use a computer. I was a saxophonist and system administrator and would regularly <em>teach</em> the computer scientists I worked with about things I would have assumed they learned in college.</p>
<p>As I headed further into the workforce I noticed another odd thing: people with tens of years of experience as software developers weren&#8217;t necessarily very good at it. My assumptions were based on what I had previously learned as a jazz musician.  Jazz musicians polish and hone their skills throughout their careers. The longer a jazz musician has been playing, the more likely he or she is to be an excellent jazz musician.</p>
<p>Programmers, though. As far as I could tell the average programmer spent his day complaining about his co-workers and waiting for 5pm.</p>
<p>So what&#8217;s the disconnect? Some of it, of course, is just the people. Some <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">programmers are passionate</a> and some aren&#8217;t. Those that aren&#8217;t, aren&#8217;t going to be radically successful. Assuming this is the case in all fields, what&#8217;s really frustrating to me is that I continue to run into passionate developers who just don&#8217;t know the right stuff.</p>
<p>When I started out in this field, I was lucky enough to stumble onto a mentor. That too was probably informed by my experience as an aspiring jazz musician. Jazz musicians take the idea of musical lineage seriously and look for someone from whom to receive direction on how to parse the potentially overwhelming task of going from novice to master jazz improviser. My mentor in the software field did the same. He told me: first learn these three things. He picked topics that were diverse but complementary. He picked skills that set a foundation on which it was easy to build the next set. Most new developers don&#8217;t get so lucky.</p>
<p>And It&#8217;s not just technology skills. The developers I work with are entrepreneurs at heart.  We aren&#8217;t sitting around polishing our tools and conducting thought experiments.  We&#8217;re delivering stuff that matters and we hate working on projects that drag on or don&#8217;t deliver value.  Becoming a great developer involves not just learning the ins and outs of software development but understanding how businesses work and exactly how software systems fit into that picture. It&#8217;s about delivering value quickly and iteratively. Great developers understand what Kent Beck and the rest of the authors of the <a href="http://agilemanifesto.org/">agile manifesto</a>  were getting at a decade ago. And what people like <a href="http://www.startuplessonslearned.com/">Eric Ries</a> are teaching today.</p>
<p>I&#8217;ve often thought &#8220;just give me 3 months with a smart person and I can have them running circles around the average developer.&#8221; Have you thought that too? I know a lot of my colleagues have.</p>
<p>It&#8217;s time to rethink how we educate software developers. Computers used to be huge scary machines in big white rooms that very few people touched. Today you probably have at least one computer ON <span class="caps">YOUR</span> <span class="caps">BODY</span> most of the time. They&#8217;re ubiquitous and friendly and just <span class="caps">NOT</span> that hard to work with. The technology landscape has changed. The system of educating developers should change along with it.</p>
<p>My colleagues are clearly thinking along the same lines. I&#8217;ve seen speakers such as <a href="http://rubyhoedown.com/">Joe O&#8217;Brien</a> talking about it this year.  And we see programs popping up all over.  Software Craftsman Ken Auer is launching the <a href="http://craftsmanshipacademy.com/">Craftsmanship Academy</a> to teach apprentices the art and craft of software development in an intense hands-on residency-oriented program.  <a href="http://codeacademy.org/">Code Academy</a> is a part-time 12 week course to accelerate the path to web development or design.</p>
<p>Today we&#8217;re launching a new program at <a href="http://livingsocial.com">LivingSocial</a> called <a href="http://hungryacademy.com">Hungry Academy</a>.  Hungry Academy is a five month intense entrepreneurial immersion that will take raw, hungry talented programmers (and aspiring programmers!) and develop them into ultra-productive software engineers. Those that make it through to the end will be offered a position on our development team and paired with a mentor from LivingSocial&#8217;s growing list of some of the <a href="http://twitter.com/#!/merbist/livingsocial">industry&#8217;s most talented software engineers</a>.  Best of all, we will <em>pay</em> you to attend.  Your <em>job</em> for five months is to take your craft and career to the next level.</p>
<p>This isn&#8217;t going to be easy. Some people will get in but won&#8217;t make it to the end. Those that do will spend five months gaining the best 4 years of experience of their careers.</p>]]></content>
  </entry>
  
</feed>
